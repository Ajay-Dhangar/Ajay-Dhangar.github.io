"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[18004],{19548:(a,n,r)=>{r.r(n),r.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>x,frontMatter:()=>d,metadata:()=>h,toc:()=>y});var e=r(17624),t=r(4552),i=r(86212),s=r(22440),l=r(62928),c=r(11504);const o=function(){const[a,n]=(0,c.useState)([]),[r,t]=(0,c.useState)(""),[i,s]=(0,c.useState)(""),[l,o]=(0,c.useState)(-1);return(0,e.jsxs)("div",{className:"array-visualization-container",children:[(0,e.jsxs)("div",{className:"input-container",children:[(0,e.jsx)("input",{type:"text",value:r,onChange:a=>t(a.target.value),placeholder:"Enter a value"}),(0,e.jsx)("button",{onClick:()=>{""!==r.trim()&&(n([...a,parseInt(r)]),t(""))},children:"Add"})]}),(0,e.jsxs)("div",{className:"input-container",children:[(0,e.jsx)("input",{type:"text",value:i,onChange:a=>s(a.target.value),placeholder:"Search for a value"}),(0,e.jsx)("button",{onClick:()=>{const n=a.indexOf(parseInt(i));o(n)},children:"Search"})]}),(0,e.jsxs)("div",{className:"array-container",children:[(0,e.jsx)("h2",{children:"Array Visualization"}),(0,e.jsx)("div",{className:"array-elements",children:a.map(((r,t)=>(0,e.jsxs)("div",{className:"array-element",children:[(0,e.jsx)("span",{children:r}),(0,e.jsx)("button",{onClick:()=>(r=>{const e=[...a];e.splice(r,1),n(e)})(t),children:"Remove"})]},t)))}),-1!==l&&(0,e.jsxs)("p",{className:"search-result",children:["Element found at index ",l]})]})]})},d={id:"arrays-in-dsa",title:"Arrays in Data Structures and Algorithms",sidebar_label:"Arrays",sidebar_position:1,description:"An array is a collection of items stored at contiguous memory locations. It is a data structure that stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.",tags:["dsa","data-structures","arrays","array","array-data-structure","array-in-dsa","array-in-data-structure","array-in-algorithm","array-in-dsa-example","array-in-dsa-explanation","array-in-dsa-conclusion","array-in-dsa-importance","array-in-dsa-syntax","array-in-dsa-declaration","array-in-dsa-access","array-in-dsa-update","array-in-dsa-length","array-in-dsa-iterate","array-in-dsa-max-min","array-in-dsa-program","array-in-dsa-code","array-in-dsa-js","array-in-dsa-java","array-in-dsa-python","array-in-dsa-c","array-in-dsa-cpp","array-in-dsa-ts"]},u=void 0,h={id:"arrays/arrays-in-dsa",title:"Arrays in Data Structures and Algorithms",description:"An array is a collection of items stored at contiguous memory locations. It is a data structure that stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.",source:"@site/dsa/arrays/arrays-dsa.md",sourceDirName:"arrays",slug:"/arrays/arrays-in-dsa",permalink:"/code-harbor-hub/dsa/arrays/arrays-in-dsa",draft:!1,unlisted:!1,tags:[{label:"dsa",permalink:"/code-harbor-hub/dsa/tags/dsa"},{label:"data-structures",permalink:"/code-harbor-hub/dsa/tags/data-structures"},{label:"arrays",permalink:"/code-harbor-hub/dsa/tags/arrays"},{label:"array",permalink:"/code-harbor-hub/dsa/tags/array"},{label:"array-data-structure",permalink:"/code-harbor-hub/dsa/tags/array-data-structure"},{label:"array-in-dsa",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa"},{label:"array-in-data-structure",permalink:"/code-harbor-hub/dsa/tags/array-in-data-structure"},{label:"array-in-algorithm",permalink:"/code-harbor-hub/dsa/tags/array-in-algorithm"},{label:"array-in-dsa-example",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-example"},{label:"array-in-dsa-explanation",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-explanation"},{label:"array-in-dsa-conclusion",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-conclusion"},{label:"array-in-dsa-importance",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-importance"},{label:"array-in-dsa-syntax",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-syntax"},{label:"array-in-dsa-declaration",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-declaration"},{label:"array-in-dsa-access",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-access"},{label:"array-in-dsa-update",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-update"},{label:"array-in-dsa-length",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-length"},{label:"array-in-dsa-iterate",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-iterate"},{label:"array-in-dsa-max-min",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-max-min"},{label:"array-in-dsa-program",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-program"},{label:"array-in-dsa-code",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-code"},{label:"array-in-dsa-js",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-js"},{label:"array-in-dsa-java",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-java"},{label:"array-in-dsa-python",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-python"},{label:"array-in-dsa-c",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-c"},{label:"array-in-dsa-cpp",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-cpp"},{label:"array-in-dsa-ts",permalink:"/code-harbor-hub/dsa/tags/array-in-dsa-ts"}],version:"current",lastUpdatedBy:"ajay-dhangar",lastUpdatedAt:1710159297,formattedLastUpdatedAt:"Mar 11, 2024",sidebarPosition:1,frontMatter:{id:"arrays-in-dsa",title:"Arrays in Data Structures and Algorithms",sidebar_label:"Arrays",sidebar_position:1,description:"An array is a collection of items stored at contiguous memory locations. It is a data structure that stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.",tags:["dsa","data-structures","arrays","array","array-data-structure","array-in-dsa","array-in-data-structure","array-in-algorithm","array-in-dsa-example","array-in-dsa-explanation","array-in-dsa-conclusion","array-in-dsa-importance","array-in-dsa-syntax","array-in-dsa-declaration","array-in-dsa-access","array-in-dsa-update","array-in-dsa-length","array-in-dsa-iterate","array-in-dsa-max-min","array-in-dsa-program","array-in-dsa-code","array-in-dsa-js","array-in-dsa-java","array-in-dsa-python","array-in-dsa-c","array-in-dsa-cpp","array-in-dsa-ts"]},sidebar:"codeharborhub",previous:{title:"Arrays",permalink:"/code-harbor-hub/dsa/category/arrays"}},m={},y=[{value:"Why are Arrays important?",id:"why-are-arrays-important",level:2},{value:"How to declare an Array?",id:"how-to-declare-an-array",level:2},{value:"How to access an Array?",id:"how-to-access-an-array",level:2},{value:"How to update an Array?",id:"how-to-update-an-array",level:2},{value:"How to find the length of an Array?",id:"how-to-find-the-length-of-an-array",level:2},{value:"How to iterate through an Array?",id:"how-to-iterate-through-an-array",level:2},{value:"How to find the maximum and minimum elements in an Array?",id:"how-to-find-the-maximum-and-minimum-elements-in-an-array",level:2},{value:"Conclusion",id:"conclusion",level:2}];function p(a){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.M)(),...a.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:"An array is a collection of items stored at contiguous memory locations. It is a data structure that stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type."}),"\n",(0,e.jsx)(o,{}),"\n",(0,e.jsx)(n.h2,{id:"why-are-arrays-important",children:"Why are Arrays important?"}),"\n",(0,e.jsx)(n.p,{children:"Arrays are important because they allow us to store multiple items of the same type in a single variable. They are used to store data in a structured way, and they are used in many algorithms and data structures."}),"\n",(0,e.jsx)(n.h2,{id:"how-to-declare-an-array",children:"How to declare an Array?"}),"\n",(0,e.jsx)(n.p,{children:"An array can be declared in various programming languages using the following syntax:"}),"\n",(0,e.jsxs)(i.c,{children:[(0,e.jsxs)(s.c,{value:"js",label:"JavaScipt",default:!0,children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-js",children:"// Declare an array in JavaScript\nlet arr = [1, 2, 3, 4, 5];\n"})})]}),(0,e.jsxs)(s.c,{value:"java",label:"Java",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:"// Declare an array in Java\nint[] arr = {1, 2, 3, 4, 5};\n"})})]}),(0,e.jsxs)(s.c,{value:"python",label:"Python",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-python",children:"# Declare an array in Python\narr = [1, 2, 3, 4, 5]\n"})})]}),(0,e.jsxs)(s.c,{value:"c",label:"C",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"// Declare an array in C\nint arr[] = {1, 2, 3, 4, 5};\n"})})]}),(0,e.jsxs)(s.c,{value:"cpp",label:"C++",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-cpp",children:"// Declare an array in C++\nint arr[] = {1, 2, 3, 4, 5};\n"})})]}),(0,e.jsxs)(s.c,{value:"ts",label:"TypeScript",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-ts",children:"// Declare an array in TypeScript\nlet arr: number[] = [1, 2, 3, 4, 5];\n"})})]})]}),"\n",(0,e.jsx)(n.h2,{id:"how-to-access-an-array",children:"How to access an Array?"}),"\n",(0,e.jsx)(n.p,{children:"An array can be accessed using the index of the element. The index of the first element is 0, the index of the second element is 1, and so on."}),"\n",(0,e.jsxs)(i.c,{children:[(0,e.jsxs)(s.c,{value:"js",label:"JavaScipt",default:!0,children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-js",children:"// Access an array in JavaScript\nlet arr = [1, 2, 3, 4, 5];\nconsole.log(arr[0]); // 1\nconsole.log(arr[1]); // 2\nconsole.log(arr[2]); // 3\nconsole.log(arr[3]); // 4\nconsole.log(arr[4]); // 5\n"})})]}),(0,e.jsxs)(s.c,{value:"java",label:"Java",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:"// Access an array in Java\nint[] arr = {1, 2, 3, 4, 5};\nSystem.out.println(arr[0]); // 1\nSystem.out.println(arr[1]); // 2\nSystem.out.println(arr[2]); // 3\nSystem.out.println(arr[3]); // 4\nSystem.out.println(arr[4]); // 5\n"})})]}),(0,e.jsxs)(s.c,{value:"python",label:"Python",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-python",children:"# Access an array in Python\narr = [1, 2, 3, 4, 5]\nprint(arr[0]) # 1\nprint(arr[1]) # 2\nprint(arr[2]) # 3\nprint(arr[3]) # 4\nprint(arr[4]) # 5\n"})})]}),(0,e.jsxs)(s.c,{value:"c",label:"C",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'// Access an array in C\nint arr[] = {1, 2, 3, 4, 5};\nprintf("%d\\n", arr[0]); // 1\nprintf("%d\\n", arr[1]); // 2\nprintf("%d\\n", arr[2]); // 3\nprintf("%d\\n", arr[3]); // 4\nprintf("%d\\n", arr[4]); // 5\n'})})]}),(0,e.jsxs)(s.c,{value:"cpp",label:"C++",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-cpp",children:"// Access an array in C++\nint arr[] = {1, 2, 3, 4, 5};\ncout << arr[0] << endl; // 1\ncout << arr[1] << endl; // 2\ncout << arr[2] << endl; // 3\ncout << arr[3] << endl; // 4\ncout << arr[4] << endl; // 5\n"})})]}),(0,e.jsxs)(s.c,{value:"ts",label:"TypeScript",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-ts",children:"// Access an array in TypeScript\nlet arr: number[] = [1, 2, 3, 4, 5];\nconsole.log(arr[0]); // 1\nconsole.log(arr[1]); // 2\nconsole.log(arr[2]); // 3\nconsole.log(arr[3]); // 4\nconsole.log(arr[4]); // 5\n"})})]})]}),"\n",(0,e.jsx)(n.h2,{id:"how-to-update-an-array",children:"How to update an Array?"}),"\n",(0,e.jsx)(n.p,{children:"An array can be updated by assigning a new value to the index of the element."}),"\n",(0,e.jsxs)(i.c,{children:[(0,e.jsxs)(s.c,{value:"js",label:"JavaScipt",default:!0,children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-js",children:"// Update an array in JavaScript\nlet arr = [1, 2, 3, 4, 5];\narr[0] = 10;\nconsole.log(arr); // [10, 2, 3, 4, 5]\n"})})]}),(0,e.jsxs)(s.c,{value:"java",label:"Java",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:"// Update an array in Java\nint[] arr = {1, 2, 3, 4, 5};\narr[0] = 10;\nSystem.out.println(Arrays.toString(arr)); // [10, 2, 3, 4, 5]\n"})})]}),(0,e.jsxs)(s.c,{value:"python",label:"Python",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-python",children:"# Update an array in Python\narr = [1, 2, 3, 4, 5]\narr[0] = 10\nprint(arr) # [10, 2, 3, 4, 5]\n"})})]}),(0,e.jsxs)(s.c,{value:"c",label:"C",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'// Update an array in C\nint arr[] = {1, 2, 3, 4, 5};\narr[0] = 10;\nfor (int i = 0; i < 5; i++) {\n    printf("%d ", arr[i]);\n}\n// 10 2 3 4 5\n'})})]}),(0,e.jsxs)(s.c,{value:"cpp",label:"C++",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-cpp",children:'// Update an array in C++\nint arr[] = {1, 2, 3, 4, 5};\narr[0] = 10;\nfor (int i = 0; i < 5; i++) {\n    cout << arr[i] << " ";\n}\n// 10 2 3 4 5\n'})})]}),(0,e.jsxs)(s.c,{value:"ts",label:"TypeScript",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-ts",children:"// Update an array in TypeScript\nlet arr: number[] = [1, 2, 3, 4, 5];\narr[0] = 10;\nconsole.log(arr); // [10, 2, 3, 4, 5]\n"})})]})]}),"\n",(0,e.jsx)(n.h2,{id:"how-to-find-the-length-of-an-array",children:"How to find the length of an Array?"}),"\n",(0,e.jsxs)(n.p,{children:["The length of an array can be found using the ",(0,e.jsx)(n.code,{children:"length"})," property."]}),"\n",(0,e.jsxs)(i.c,{children:[(0,e.jsxs)(s.c,{value:"js",label:"JavaScipt",default:!0,children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-js",children:"// Find the length of an array in JavaScript\nlet arr = [1, 2, 3, 4, 5];\nconsole.log(arr.length); // 5\n"})})]}),(0,e.jsxs)(s.c,{value:"java",label:"Java",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:"// Find the length of an array in Java\nint[] arr = {1, 2, 3, 4, 5};\nSystem.out.println(arr.length); // 5\n"})})]}),(0,e.jsxs)(s.c,{value:"python",label:"Python",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-python",children:"# Find the length of an array in Python\narr = [1, 2, 3, 4, 5]\nprint(len(arr)) # 5\n"})})]}),(0,e.jsxs)(s.c,{value:"c",label:"C",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'// Find the length of an array in C\nint arr[] = {1, 2, 3, 4, 5};\nint length = sizeof(arr) // sizeof(arr[0]);\nprintf("%d\\n", length); // 5\n'})})]}),(0,e.jsxs)(s.c,{value:"cpp",label:"C++",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-cpp",children:"// Find the length of an array in C++\nint arr[] = {1, 2, 3, 4, 5};\nint length = sizeof(arr) // sizeof(arr[0]);\ncout << length << endl; // 5\n"})})]}),(0,e.jsxs)(s.c,{value:"ts",label:"TypeScript",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-ts",children:"// Find the length of an array in TypeScript\nlet arr: number[] = [1, 2, 3, 4, 5];\nconsole.log(arr.length); // 5\n"})})]})]}),"\n",(0,e.jsx)(n.h2,{id:"how-to-iterate-through-an-array",children:"How to iterate through an Array?"}),"\n",(0,e.jsxs)(n.p,{children:["An array can be iterated using a loop such as ",(0,e.jsx)(n.code,{children:"for"})," loop, ",(0,e.jsx)(n.code,{children:"while"})," loop, or ",(0,e.jsx)(n.code,{children:"for...of"})," loop."]}),"\n",(0,e.jsxs)(i.c,{children:[(0,e.jsxs)(s.c,{value:"js",label:"JavaScipt",default:!0,children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-js",children:"// Iterate through an array in JavaScript\nlet arr = [1, 2, 3, 4, 5];\nfor (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n// 1\n// 2\n// 3\n// 4\n// 5\n"})})]}),(0,e.jsxs)(s.c,{value:"java",label:"Java",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:"// Iterate through an array in Java\nint[] arr = {1, 2, 3, 4, 5};\nfor (int i = 0; i < arr.length; i++) {\n    System.out.println(arr[i]);\n}\n// 1\n// 2\n// 3\n// 4\n// 5\n"})})]}),(0,e.jsxs)(s.c,{value:"python",label:"Python",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-python",children:"# Iterate through an array in Python\narr = [1, 2, 3, 4, 5]\nfor i in arr:\n    print(i)\n# 1\n# 2\n# 3\n# 4\n# 5\n"})})]}),(0,e.jsxs)(s.c,{value:"c",label:"C",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'// Iterate through an array in C\nint arr[] = {1, 2, 3, 4, 5};\nfor (int i = 0; i < 5; i++) {\n    printf("%d\\n", arr[i]);\n}\n// 1\n// 2\n// 3\n// 4\n// 5\n'})})]}),(0,e.jsxs)(s.c,{value:"cpp",label:"C++",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-cpp",children:"// Iterate through an array in C++\nint arr[] = {1, 2, 3, 4, 5};\n  for (int i = 0; i < 5; i++) {\n      cout << arr[i] << endl;\n  }\n  // 1\n  // 2\n  // 3\n  // 4\n  // 5\n"})})]}),(0,e.jsxs)(s.c,{value:"ts",label:"TypeScript",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-ts",children:"// Iterate through an array in TypeScript\nlet arr: number[] = [1, 2, 3, 4, 5];\nfor (let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n// 1\n// 2\n// 3\n// 4\n// 5\n"})})]})]}),"\n",(0,e.jsx)(n.h2,{id:"how-to-find-the-maximum-and-minimum-elements-in-an-array",children:"How to find the maximum and minimum elements in an Array?"}),"\n",(0,e.jsx)(n.p,{children:"The maximum and minimum elements in an array can be found by iterating through the array and comparing each element with the current maximum and minimum elements."}),"\n",(0,e.jsxs)(i.c,{children:[(0,e.jsxs)(s.c,{value:"js",label:"JavaScipt",default:!0,children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-js",children:"// Find the maximum and minimum elements in an array in JavaScript\nfunction findMaxMin(arr) {\n    let max = arr[0];\n    let min = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return { max, min };\n}\n\nlet arr = [2, 5, 1, 20, 10];\nconsole.log(findMaxMin(arr)); // { max: 20, min: 1 }\n"})})]}),(0,e.jsxs)(s.c,{value:"java",label:"Java",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-java",children:'public class Main {\n// Find the maximum and minimum elements in an array in Java\nstatic class MaxMin {\n    int max;\n    int min;\n}\n\nstatic MaxMin findMaxMin(int arr[]) {\n    MaxMin result = new MaxMin();\n    result.max = arr[0];\n    result.min = arr[0];\n    for (int i = 1; i < arr.length; i++) {\n        if (arr[i] > result.max) {\n            result.max = arr[i];\n        }\n        if (arr[i] < result.min) {\n            result.min = arr[i];\n        }\n    }\n    return result;\n}\n\n  public static void main(String[] args) {\n      int arr[] = {2, 5, 1, 20, 10};\n      MaxMin result = findMaxMin(arr);\n      System.out.println("{ max: " + result.max + ", min: " + result.min + " }"); // { max: 20, min: 1 }\n  }\n}\n\n'})})]}),(0,e.jsxs)(s.c,{value:"python",label:"Python",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-python",children:'# Find the maximum and minimum elements in an array in Python\ndef find_max_min(arr):\n    max = arr[0]\n    min = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n        if arr[i] < min:\n            min = arr[i]\n    return {"max": max, "min": min}\n\n  arr = [2, 5, 1, 20, 10]\n  print(find_max_min(arr)) # { max: 20, min: 1 }\n'})})]}),(0,e.jsxs)(s.c,{value:"c",label:"C",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'// Find the maximum and minimum elements in an array in C\nstruct MaxMin {\n    int max;\n    int min;\n};\n\nstruct MaxMin findMaxMin(int arr[], int n) {\n    struct MaxMin result;\n    result.max = arr[0];\n    result.min = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > result.max) {\n            result.max = arr[i];\n        }\n        if (arr[i] < result.min) {\n            result.min = arr[i];\n        }\n    }\n    return result;\n}\n\nint arr[] = {2, 5, 1, 20, 10};\nstruct MaxMin result = findMaxMin(arr, 5);\nprintf("{ max: %d, min: %d }\\n", result.max, result.min); // { max: 20, min: 1 }\n'})})]}),(0,e.jsxs)(s.c,{value:"cpp",label:"C++",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-cpp",children:'// Find the maximum and minimum elements in an array in C++\nstruct MaxMin {\n    int max;\n    int min;\n};\n\nMaxMin findMaxMin(int arr[], int n) {\n    MaxMin result;\n    result.max = arr[0];\n    result.min = arr[0];\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > result.max) {\n            result.max = arr[i];\n        }\n        if (arr[i] < result.min) {\n            result.min = arr[i];\n        }\n    }\n    return result;\n}\n\nint arr[] = {2, 5, 1, 20, 10};\nMaxMin result = findMaxMin(arr, 5);\ncout << "{ max: " << result.max << ", min: " << result.min << " }" << endl; // { max: 20, min: 1 }\n'})})]}),(0,e.jsxs)(s.c,{value:"ts",label:"TypeScript",children:[(0,e.jsx)(l.c,{name:"@Ajay-Dhangar"}),(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-ts",children:"// Find the maximum and minimum elements in an array in TypeScript\ninterface MaxMin {\n    max: number;\n    min: number;\n}\n\nfunction findMaxMin(arr: number[]): MaxMin {\n    let max = arr[0];\n    let min = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    return { max, min };\n}\n\nlet arr: number[] = [2, 5, 1, 20, 10];\nconsole.log(findMaxMin(arr)); // { max: 20, min: 1 }\n"})})]})]}),"\n",(0,e.jsx)(n.admonition,{title:"\ud83d\udcdd Info",type:"info",children:(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"The time complexity of finding the maximum and minimum elements in an array is O(n)."}),"\n",(0,e.jsx)(n.li,{children:"The space complexity of finding the maximum and minimum elements in an array is O(1)."}),"\n"]})}),"\n",(0,e.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,e.jsx)(n.p,{children:"In this tutorial, we learned about arrays in data structures and algorithms. We learned how to declare an array, access an array, update an array, find the length of an array, iterate through an array, and find the maximum and minimum elements in an array. Arrays are an important data structure that is used in many algorithms and data structures."})]})}function x(a={}){const{wrapper:n}={...(0,t.M)(),...a.components};return n?(0,e.jsx)(n,{...a,children:(0,e.jsx)(p,{...a})}):p(a)}},22440:(a,n,r)=>{r.d(n,{c:()=>s});r(11504);var e=r(65456);const t={tabItem:"tabItem_Ymn6"};var i=r(17624);function s(a){let{children:n,hidden:r,className:s}=a;return(0,i.jsx)("div",{role:"tabpanel",className:(0,e.c)(t.tabItem,s),hidden:r,children:n})}},86212:(a,n,r)=>{r.d(n,{c:()=>A});var e=r(11504),t=r(65456),i=r(77288),s=r(55592),l=r(83472),c=r(95068),o=r(30604),d=r(46432);function u(a){return e.Children.toArray(a).filter((a=>"\n"!==a)).map((a=>{if(!a||(0,e.isValidElement)(a)&&function(a){const{props:n}=a;return!!n&&"object"==typeof n&&"value"in n}(a))return a;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof a.type?a.type:a.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(a){const{values:n,children:r}=a;return(0,e.useMemo)((()=>{const a=n??function(a){return u(a).map((a=>{let{props:{value:n,label:r,attributes:e,default:t}}=a;return{value:n,label:r,attributes:e,default:t}}))}(r);return function(a){const n=(0,o.w)(a,((a,n)=>a.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((a=>a.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(a),a}),[n,r])}function m(a){let{value:n,tabValues:r}=a;return r.some((a=>a.value===n))}function y(a){let{queryString:n=!1,groupId:r}=a;const t=(0,s.Uz)(),i=function(a){let{queryString:n=!1,groupId:r}=a;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,c._M)(i),(0,e.useCallback)((a=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,a),t.replace({...t.location,search:n.toString()})}),[i,t])]}function p(a){const{defaultValue:n,queryString:r=!1,groupId:t}=a,i=h(a),[s,c]=(0,e.useState)((()=>function(a){let{defaultValue:n,tabValues:r}=a;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((a=>a.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const e=r.find((a=>a.default))??r[0];if(!e)throw new Error("Unexpected error: 0 tabValues");return e.value}({defaultValue:n,tabValues:i}))),[o,u]=y({queryString:r,groupId:t}),[p,x]=function(a){let{groupId:n}=a;const r=function(a){return a?`docusaurus.tab.${a}`:null}(n),[t,i]=(0,d.IN)(r);return[t,(0,e.useCallback)((a=>{r&&i.set(a)}),[r,i])]}({groupId:t}),j=(()=>{const a=o??p;return m({value:a,tabValues:i})?a:null})();(0,l.c)((()=>{j&&c(j)}),[j]);return{selectedValue:s,selectValue:(0,e.useCallback)((a=>{if(!m({value:a,tabValues:i}))throw new Error(`Can't select invalid tab value=${a}`);c(a),u(a),x(a)}),[u,x,i]),tabValues:i}}var x=r(89788);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=r(17624);function b(a){let{className:n,block:r,selectedValue:e,selectValue:s,tabValues:l}=a;const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.MV)(),d=a=>{const n=a.currentTarget,r=c.indexOf(n),t=l[r].value;t!==e&&(o(n),s(t))},u=a=>{let n=null;switch(a.key){case"Enter":d(a);break;case"ArrowRight":{const r=c.indexOf(a.currentTarget)+1;n=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(a.currentTarget)-1;n=c[r]??c[c.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.c)("tabs",{"tabs--block":r},n),children:l.map((a=>{let{value:n,label:r,attributes:i}=a;return(0,g.jsx)("li",{role:"tab",tabIndex:e===n?0:-1,"aria-selected":e===n,ref:a=>c.push(a),onKeyDown:u,onClick:d,...i,className:(0,t.c)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":e===n}),children:r??n},n)}))})}function f(a){let{lazy:n,children:r,selectedValue:t}=a;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const a=i.find((a=>a.props.value===t));return a?(0,e.cloneElement)(a,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:i.map(((a,n)=>(0,e.cloneElement)(a,{key:n,hidden:a.props.value!==t})))})}function v(a){const n=p(a);return(0,g.jsxs)("div",{className:(0,t.c)("tabs-container",j.tabList),children:[(0,g.jsx)(b,{...a,...n}),(0,g.jsx)(f,{...a,...n})]})}function A(a){const n=(0,x.c)();return(0,g.jsx)(v,{...a,children:u(a.children)},String(n))}},62928:(a,n,r)=>{r.d(n,{c:()=>t});r(11504);var e=r(17624);function t(a){let{name:n}=a;return(0,e.jsx)("div",{className:"solution-author-wrapper",children:(0,e.jsxs)("span",{children:["Written by ",n]})})}},4552:(a,n,r)=>{r.d(n,{I:()=>l,M:()=>s});var e=r(11504);const t={},i=e.createContext(t);function s(a){const n=e.useContext(i);return e.useMemo((function(){return"function"==typeof a?a(n):{...n,...a}}),[n,a])}function l(a){let n;return n=a.disableParentContext?"function"==typeof a.components?a.components(t):a.components||t:s(a.components),e.createElement(i.Provider,{value:n},a.children)}}}]);