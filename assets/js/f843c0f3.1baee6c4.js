"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[47732],{8876:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>h,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var a=t(17624),i=t(4552),r=t(11504);const n=()=>{const[e,s]=(0,r.useState)([]),[t,i]=(0,r.useState)(200),[n,l]=(0,r.useState)(!1),[o,d]=(0,r.useState)([]);(0,r.useEffect)((()=>{h()}),[]),(0,r.useEffect)((()=>{c()}),[t]);const h=()=>{const e=Array.from({length:30},(()=>Math.ceil(100*Math.random())));s(e)},c=()=>{const e=document.styleSheets;for(let s=0;s<e.length;s++){const a=e[s].cssRules||e[s].rules;for(let e=0;e<a.length;e++)if(".v-move"===a[e].selectorText){a[e].style.transitionDuration=`${t}ms`;break}}};return(0,a.jsxs)("div",{className:"bubble-sort-visualization",children:[(0,a.jsxs)("p",{children:["Speed: ",(0,a.jsx)("input",{type:"range",min:"10",max:"200",value:t,onChange:e=>i(Number(e.target.value))})]}),(0,a.jsx)("button",{onClick:async()=>{l(!0);let a=[...e];for(let e=0;e<a.length-1;e++)for(let i=0;i<a.length-e-1;i++)if(d([i,i+1]),await new Promise((e=>setTimeout(e,t))),a[i]>a[i+1]){let e=a[i];a[i]=a[i+1],a[i+1]=e,s([...a])}d([]),l(!1)},disabled:n,children:"Sort"}),"\xa0",(0,a.jsx)("button",{onClick:h,disabled:n,children:"Generate New Array"}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsxs)("p",{children:[(0,a.jsx)("strong",{children:"Instructions:"}),' Click the "Sort" button to visualize the Bubble Sort algorithm. You can also adjust the speed of the visualization using the slider.']}),(0,a.jsx)("div",{className:"array-container",children:e.map(((e,s)=>(0,a.jsx)("div",{className:"array-bar "+(o.includes(s)?"comparing":""),style:{height:3*e+"px"}},s)))})]})},l={id:"arrays-bubblesort-in-dsa",title:"Arrays - Bubble Sort in DSA",sidebar_label:"Bubble Sort",sidebar_position:2,description:"Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the",tags:["dsa","arrays","sorting","bubble-sort","algorithm of bubble-sort","pseudocode of bubble-sort","complexity of bubble-sort","example of bubble-sort","live example of bubble-sort","explanation of bubble-sort","quiz of bubble-sort","conclusion of bubble-sort"]},o=void 0,d={id:"arrays/arrays-bubblesort-in-dsa",title:"Arrays - Bubble Sort in DSA",description:"Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the",source:"@site/dsa/arrays/arrays-bubblesort-dsa.md",sourceDirName:"arrays",slug:"/arrays/arrays-bubblesort-in-dsa",permalink:"/code-harbor-hub/dsa/arrays/arrays-bubblesort-in-dsa",draft:!1,unlisted:!1,tags:[{label:"dsa",permalink:"/code-harbor-hub/dsa/tags/dsa"},{label:"arrays",permalink:"/code-harbor-hub/dsa/tags/arrays"},{label:"sorting",permalink:"/code-harbor-hub/dsa/tags/sorting"},{label:"bubble-sort",permalink:"/code-harbor-hub/dsa/tags/bubble-sort"},{label:"algorithm of bubble-sort",permalink:"/code-harbor-hub/dsa/tags/algorithm-of-bubble-sort"},{label:"pseudocode of bubble-sort",permalink:"/code-harbor-hub/dsa/tags/pseudocode-of-bubble-sort"},{label:"complexity of bubble-sort",permalink:"/code-harbor-hub/dsa/tags/complexity-of-bubble-sort"},{label:"example of bubble-sort",permalink:"/code-harbor-hub/dsa/tags/example-of-bubble-sort"},{label:"live example of bubble-sort",permalink:"/code-harbor-hub/dsa/tags/live-example-of-bubble-sort"},{label:"explanation of bubble-sort",permalink:"/code-harbor-hub/dsa/tags/explanation-of-bubble-sort"},{label:"quiz of bubble-sort",permalink:"/code-harbor-hub/dsa/tags/quiz-of-bubble-sort"},{label:"conclusion of bubble-sort",permalink:"/code-harbor-hub/dsa/tags/conclusion-of-bubble-sort"}],version:"current",lastUpdatedBy:"ajay-dhangar",lastUpdatedAt:1710270145,formattedLastUpdatedAt:"Mar 12, 2024",sidebarPosition:2,frontMatter:{id:"arrays-bubblesort-in-dsa",title:"Arrays - Bubble Sort in DSA",sidebar_label:"Bubble Sort",sidebar_position:2,description:"Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the",tags:["dsa","arrays","sorting","bubble-sort","algorithm of bubble-sort","pseudocode of bubble-sort","complexity of bubble-sort","example of bubble-sort","live example of bubble-sort","explanation of bubble-sort","quiz of bubble-sort","conclusion of bubble-sort"]},sidebar:"codeharborhub",previous:{title:"Arrays",permalink:"/code-harbor-hub/dsa/arrays/arrays-in-dsa"}},h={},c=[{value:"Algorithm",id:"algorithm",level:2},{value:"Pseudocode",id:"pseudocode",level:2},{value:"Diagram",id:"diagram",level:2},{value:"Example",id:"example",level:2},{value:"Complexity",id:"complexity",level:2},{value:"Live Example",id:"live-example",level:2},{value:"Explanation",id:"explanation",level:2},{value:"References",id:"references",level:2},{value:"Related",id:"related",level:2},{value:"Quiz",id:"quiz",level:2},{value:"Conclusion",id:"conclusion",level:2}];function b(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",input:"input",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Bubble Sort"})," is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller elements ",(0,a.jsx)("mark",{children:"bubble"})," to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems even when compared to ",(0,a.jsx)("mark",{children:"insertion sort"}),". It can be practical if the input is usually in sorted order but may occasionally have some out-of-order elements nearly in position."]}),"\n",(0,a.jsx)(n,{}),"\n",(0,a.jsx)(s.h2,{id:"algorithm",children:"Algorithm"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsx)(s.li,{children:"Start from the first element, compare the current element with the next element of the array."}),"\n",(0,a.jsx)(s.li,{children:"If the current element is greater than the next element of the array, swap them."}),"\n",(0,a.jsx)(s.li,{children:"If the current element is less than the next element, move to the next element."}),"\n",(0,a.jsx)(s.li,{children:"Repeat steps 1-3 until the array is sorted."}),"\n",(0,a.jsx)(s.li,{children:"The array is sorted."}),"\n",(0,a.jsx)(s.li,{children:"Exit."}),"\n",(0,a.jsx)(s.li,{children:"The time complexity of the bubble sort is O(n^2)."}),"\n",(0,a.jsx)(s.li,{children:"The space complexity of the bubble sort is O(1)."}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"pseudocode",children:"Pseudocode"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-plaintext",metastring:'title="Bubble Sort"',children:"procedure bubbleSort( A : list of sortable items )\n    n = length(A)\n    repeat\n        swapped = false\n        for i = 1 to n-1 inclusive do\n            if A[i-1] > A[i] then\n                swap(A[i-1], A[i])\n                swapped = true\n            end if\n        end for\n    until not swapped\nend procedure\n"})}),"\n",(0,a.jsx)(s.h2,{id:"diagram",children:"Diagram"}),"\n",(0,a.jsx)(s.mermaid,{value:'graph TD\n    A([Start]) --\x3e B("i = 0")\n    B --\x3e C{"i < n-1"}\n    C --\x3e|True| D("j = 0")\n    D --\x3e E{"j < n - i - 1"}\n    E --\x3e|True| F{arr j > arr j+1}\n    F --\x3e|True| G{Swap arr j, arr j+1 }\n    G --\x3e H{Increment j}\n    H --\x3e |j++| D\n    F --\x3e|False| I{Increment j}\n    I --\x3e |j++| D\n    E --\x3e |false i++| C\n    D --\x3e |False| J{Increment i}\n    J --\x3e |i++| C\n    C --\x3e|False| K(Sorted Array)\n    K --\x3e L([Stop])\n'}),"\n",(0,a.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-js",metastring:'title="Bubble Sort"',children:"function bubbleSort(arr) {\n  let n = arr.length;\n  let swapped;\n  do {\n    swapped = false;\n    for (let i = 0; i < n - 1; i++) {\n      if (arr[i] > arr[i + 1]) {\n        let temp = arr[i];\n        arr[i] = arr[i + 1];\n        arr[i + 1] = temp;\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  return arr;\n}\n\nlet arr = [64, 34, 25, 12, 22, 11, 90];\nconsole.log(bubbleSort(arr)); // [ 11, 12, 22, 25, 34, 64, 90 ]\n"})}),"\n",(0,a.jsx)(s.h2,{id:"complexity",children:"Complexity"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Time Complexity"}),": O(n^2)","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Best Case: O(n)"}),"\n",(0,a.jsx)(s.li,{children:"Average Case: O(n^2)"}),"\n",(0,a.jsx)(s.li,{children:"Worst Case: O(n^2)"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Space Complexity"}),": O(1)"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Stable"}),": Yes"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"live-example",children:"Live Example"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-js",metastring:"live",live:!0,children:'function bubbleSort() {\n  let arr = [64, 34, 25, 12, 22, 11, 90];\n  let n = arr.length;\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        let temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n\n  return (\n    <div>\n        <h3>Bubble Sort</h3>\n        <p><b>Array:</b> [64, 34, 25, 12, 22, 11, 90]</p>\n        <p>\n            <b>Sorted Array:</b> [{arr.join(", ")}]\n        </p>\n    </div>\n  )\n}\n'})}),"\n",(0,a.jsx)(s.h2,{id:"explanation",children:"Explanation"}),"\n",(0,a.jsxs)(s.p,{children:["In the above example, we have an array of numbers ",(0,a.jsx)(s.code,{children:"[64, 34, 25, 12, 22, 11, 90]"}),". We are using the bubble sort algorithm to sort the array in ascending order. The bubble sort algorithm compares each pair of adjacent items and swaps them if they are in the wrong order. The algorithm repeats this process until the array is sorted. The sorted array is ",(0,a.jsx)(s.code,{children:"[11, 12, 22, 25, 34, 64, 90]"}),". The time complexity of the bubble sort is O(n^2) and the space complexity is O(1)."]}),"\n",(0,a.jsx)(s.admonition,{title:"Try it yourself",type:"info",children:(0,a.jsx)(s.p,{children:"Change the array values and see how the bubble sort algorithm sorts the array."})}),"\n",(0,a.jsxs)(s.admonition,{title:"\ud83d\udcdd Note",type:"tip",children:[(0,a.jsx)(s.p,{children:"Bubble sort is not a practical sorting algorithm when the input is large. It is not suitable for large datasets due to its O(n^2) time complexity."}),(0,a.jsx)(s.p,{children:"The main advantage of bubble sort is that it is easy to understand and implement. It is often used to teach the concept of sorting algorithms."}),(0,a.jsx)(s.p,{children:"Bubble sort is stable, meaning that it preserves the relative order of equal elements."}),(0,a.jsx)(s.p,{children:"Bubble sort is not an efficient algorithm for large datasets and is generally not used in practice."})]}),"\n",(0,a.jsx)(s.h2,{id:"references",children:"References"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Bubble_sort",children:"Wikipedia"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://www.geeksforgeeks.org/bubble-sort/",children:"GeeksforGeeks"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://www.programiz.com/dsa/bubble-sort",children:"Programiz"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://www.tutorialspoint.com/data_structures_algorithms/bubble_sort_algorithm.htm",children:"TutorialsPoint"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://www.studytonight.com/data-structures/bubble-sort",children:"StudyTonight"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.a,{href:"https://www.w3schools.com/dsa/dsa_algo_bubblesort.php",children:"w3schools"})}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"related",children:"Related"}),"\n",(0,a.jsx)(s.p,{children:"Insertion Sort, Selection Sort, Merge Sort, Quick Sort, etc."}),"\n",(0,a.jsx)(s.h2,{id:"quiz",children:"Quiz"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"What is the time complexity of the bubble sort algorithm?"}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","O(n)"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ","O(n^2)     \u2714"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","O(log n)"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","O(n!)"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Is bubble sort a stable sorting algorithm?"}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ","Yes    \u2714"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","No"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Maybe"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","Not sure"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"What is the space complexity of the bubble sort algorithm?"}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","O(n)"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ","O(1)   \u2714"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","O(log n)"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","O(n!)"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"What is the main advantage of bubble sort?"}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","It is the fastest sorting algorithm"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ","It is easy to understand and implement     \u2714"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","It is suitable for large datasets"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","It is used in practice"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"What is the main disadvantage of bubble sort?"}),"\n",(0,a.jsxs)(s.ul,{className:"contains-task-list",children:["\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","It is the fastest sorting algorithm"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","It is easy to understand and implement"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",checked:!0,disabled:!0})," ","It is not suitable for large datasets  \u2714"]}),"\n",(0,a.jsxs)(s.li,{className:"task-list-item",children:[(0,a.jsx)(s.input,{type:"checkbox",disabled:!0})," ","It is used in practice"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(s.p,{children:"In this tutorial, we learned about the bubble sort algorithm. We discussed the algorithm, pseudocode, diagram, example, complexity, and related concepts. We also implemented the bubble sort algorithm in JavaScript and saw a live example. We also discussed the advantages and disadvantages of the bubble sort algorithm. We hope you enjoyed this tutorial and found it helpful. Feel free to share your thoughts in the comments below."})]})}function u(e={}){const{wrapper:s}={...(0,i.M)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(b,{...e})}):b(e)}},4552:(e,s,t)=>{t.d(s,{I:()=>l,M:()=>n});var a=t(11504);const i={},r=a.createContext(i);function n(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);