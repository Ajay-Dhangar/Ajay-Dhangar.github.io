"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[62798],{72312:e=>{e.exports=JSON.parse('{"label":"state-management","permalink":"/code-harbor-hub/courses/tags/state-management","allTagsPath":"/code-harbor-hub/courses/tags","count":4,"items":[{"id":"react-js/begginer-level/introduction-to-forms/lesson-1","title":"Creating controlled components to manage form data with state","description":"learn how to create controlled components in React to manage form data using state. Controlled components allow you to handle form inputs and manage their state, enabling you to control and validate user input in React applications.","permalink":"/code-harbor-hub/courses/react-js/begginer-level/introduction-to-forms/lesson-1"},{"id":"react-js/begginer-level/introduction-to-forms/lesson-2","title":"Handling form submissions (sending data or local processing)","description":"learn how to handle form submissions in React applications. Handling form submissions involves sending form data to a server or processing it locally within the application. In this lesson, we will explore how to handle form submissions in React using event handlers and state management.","permalink":"/code-harbor-hub/courses/react-js/begginer-level/introduction-to-forms/lesson-2"},{"id":"react-js/intermidiate-level/managing-complex-uis/lesson-1","title":"Lifting state up for shared state management across components","description":"Learn how to lift state up in React to manage shared state across multiple components. Lifting state up is a common pattern in React applications that allows you to share state between components and keep your application\'s data in sync.","permalink":"/code-harbor-hub/courses/react-js/intermidiate-level/managing-complex-uis/lesson-1"},{"id":"react-js/intermidiate-level/managing-complex-uis/lesson-2","title":"Understanding the challenges of prop drilling","description":"Learn about the challenges of prop drilling in React applications and how to avoid them using context, Redux, or other state management libraries. Prop drilling can lead to complex and hard-to-maintain code, especially in large applications with deeply nested components.","permalink":"/code-harbor-hub/courses/react-js/intermidiate-level/managing-complex-uis/lesson-2"}],"unlisted":false}')}}]);