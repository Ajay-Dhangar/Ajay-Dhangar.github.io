"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[61672],{30344:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2012/01/13/git-best-practicies","metadata":{"permalink":"/code-harbor-hub/blog/2012/01/13/git-best-practicies","source":"@site/blog/2012-01-13-git-best-practicies.md","title":" Git Best Practices: Commit Often, Perfect Later, Publish Once","description":"Git is a powerful tool for managing the development of software projects, but it can be challenging to use effectively. In this article, we\'ll take a look at some best practices for using Git, including how to structure your commits, how to manage branches, and how to collaborate with others. By following these best practices, you can make your development process more efficient and less error-prone.","date":"2024-03-15T14:37:46.000Z","formattedDate":"March 15, 2024","tags":[{"label":"git","permalink":"/code-harbor-hub/blog/tags/git"},{"label":"best practicies","permalink":"/code-harbor-hub/blog/tags/best-practicies"}],"readingTime":4.23,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar"}],"frontMatter":{"title":" Git Best Practices: Commit Often, Perfect Later, Publish Once","sidebar_label":"Git Best Practicies","authors":["ajay-dhangar"],"tags":["git","best practicies"],"date":"2024-03-15T14:37:46.000Z"},"unlisted":false,"nextItem":{"title":"Sed: Normalize markdown file with Regex","permalink":"/code-harbor-hub/blog/2020/11/26/sed-normalize-md-file-with-regex"}},"content":"Git is a powerful tool for managing the development of software projects, but it can be challenging to use effectively. In this article, we\'ll take a look at some best practices for using Git, including how to structure your commits, how to manage branches, and how to collaborate with others. By following these best practices, you can make your development process more efficient and less error-prone.\\n\\n## Commit Often, Perfect Later, Publish Once\\n\\nOne of the most important best practices for using Git is to commit your changes often. This means that you should make small, focused commits that capture a single logical change to your code. By committing often, you can keep a detailed history of your changes, which makes it easier to understand the evolution of your codebase and to track down bugs.\\n\\nWhen you\'re working on a new feature or fixing a bug, it\'s important to commit your changes frequently, even if they\'re not perfect. You can always go back and revise your commits later to clean them up and make them more coherent. By committing often and revising later, you can avoid the temptation to make large, sweeping changes to your code all at once, which can lead to confusion and errors.\\n\\nOnce you\'re satisfied with your changes, you can publish them to a shared repository, such as GitHub or Bitbucket. By publishing your changes once, you can make it easier for others to review your work and to collaborate with you. This can help to prevent merge conflicts and to ensure that everyone is working from the most up-to-date version of the codebase.\\n\\n## Structure Your Commits\\n\\nWhen you\'re committing your changes, it\'s important to structure your commits in a way that makes it easy to understand the evolution of your codebase. This means that you should avoid making large, monolithic commits that capture multiple unrelated changes. Instead, you should make small, focused commits that capture a single logical change to your code.\\n\\nOne way to structure your commits is to use the \\"atomic commit\\" pattern, which involves making a series of small, focused commits that capture a single logical change to your code. For example, if you\'re working on a new feature, you might make a series of commits that add individual components of the feature, such as the user interface, the business logic, and the data model. By structuring your commits in this way, you can make it easier to understand the evolution of your codebase and to track down bugs.\\n\\nAnother way to structure your commits is to use the \\"semantic commit\\" pattern, which involves using a standardized format for your commit messages. For example, you might use a format like \\"feat: add new feature\\" or \\"fix: correct bug in user interface\\". By using a standardized format for your commit messages, you can make it easier to understand the purpose of each commit and to navigate through the history of your codebase.\\n\\n## Manage Your Branches\\n\\nWhen you\'re working on a software project, it\'s important to manage your branches effectively. This means that you should create a new branch for each new feature or bug fix that you\'re working on, and that you should merge your branches back into the main codebase once you\'re finished with them.\\n\\nBy managing your branches effectively, you can make it easier to collaborate with others and to keep your codebase organized. For example, if you\'re working on a new feature, you might create a new branch for the feature, make your changes on the branch, and then merge the branch back into the main codebase once the feature is complete. By doing this, you can make it easier for others to review your work and to collaborate with you, and you can avoid introducing bugs and conflicts into the main codebase.\\n\\n## Collaborate with Others\\n\\nOne of the most powerful features of Git is its ability to help you collaborate with others. By using Git, you can make it easier to share your work with others, to review their work, and to resolve conflicts and merge changes together.\\n\\nWhen you\'re collaborating with others, it\'s important to communicate effectively and to follow best practices for using Git. For example, you should make sure to pull the latest changes from the shared repository before you start working on a new feature or bug fix, and you should make sure to push your changes to the shared repository once you\'re finished with them. By following these best practices, you can make it easier to collaborate with others and to keep your codebase organized and up-to-date.\\n\\n## Conclusion\\n\\nGit is a powerful tool for managing the development of software projects, but it can be challenging to use effectively. By following best practices for using Git, such as committing often, structuring your commits, managing your branches, and collaborating with others, you can make your development process more efficient and less error-prone. By doing this, you can make it easier to understand the evolution of your codebase, to track down bugs, and to collaborate with others. Happy coding!"},{"id":"/2020/11/26/sed-normalize-md-file-with-regex","metadata":{"permalink":"/code-harbor-hub/blog/2020/11/26/sed-normalize-md-file-with-regex","source":"@site/blog/2020-11-26-sed-normalize-md-file-with-regex.md","title":"Sed: Normalize markdown file with Regex","description":"How to normalize markdown file with Regex","date":"2024-03-15T14:37:46.000Z","formattedDate":"March 15, 2024","tags":[{"label":"sed","permalink":"/code-harbor-hub/blog/tags/sed"},{"label":"regex","permalink":"/code-harbor-hub/blog/tags/regex"},{"label":"web clipper","permalink":"/code-harbor-hub/blog/tags/web-clipper"}],"readingTime":2.255,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar"}],"frontMatter":{"title":"Sed: Normalize markdown file with Regex","author":"Ajay Dhangar","tags":["sed","regex","web clipper"],"date":"2024-03-15T14:37:46.000Z","description":"How to normalize markdown file with Regex","draft":false},"unlisted":false,"prevItem":{"title":" Git Best Practices: Commit Often, Perfect Later, Publish Once","permalink":"/code-harbor-hub/blog/2012/01/13/git-best-practicies"},"nextItem":{"title":"nvs: One Node Version Per Terminal in Windows","permalink":"/code-harbor-hub/blog/2021/09/19/nvs-one-node-version-per-terminal-in-windows"}},"content":"I have been using [web clipper](https://www.notion.so/web-clipper) to save articles and blog posts for a while now. It\'s a great tool to save content from the web and organize it in a clean and readable format. However, the markdown files generated by web clipper are not always consistent, and I often find myself manually editing them to make them more readable.\\n\\nOne of the common issues I encounter is inconsistent formatting of the front matter in the markdown files. The front matter is a block of metadata at the beginning of a markdown file that contains information such as the title, author, tags, date, and description of the content. Here\'s an example of what the front matter looks like:\\n\\n```markdown\\n---\\ntitle: \'Sed: Normalize markdown file with Regex\'\\nauthor: Ajay Dhangar\\ntags: [sed, regex, web clipper]\\ndate: 2020-11-26 21:13:28\\ndescription: How to normalize markdown file with Regex\\ndraft: false\\n---\\n```\\n\\nAs you can see, the front matter is enclosed in three dashes (`---`) at the beginning and end of the block, and each key-value pair is separated by a colon (`:`). The keys and values are also enclosed in single quotes (`\'`) to ensure that special characters are escaped properly.\\n\\nTo make the front matter consistent across all my markdown files, I decided to use the `sed` command-line utility to write a simple regular expression that would normalize the front matter. Here\'s the regular expression I came up with:\\n\\n```bash\\nsed -i -E \\"s/^---\\\\n(.*: .*\\\\n)+---\\\\n//g\\" file.md\\n```\\n\\nLet\'s break down the regular expression:\\n\\n- `^---\\\\n` matches the opening three dashes at the beginning of the file, followed by a newline character.\\n- `(.*: .*\\\\n)+` matches one or more lines containing a key-value pair, where the key is followed by a colon and a space, and the value is followed by a newline character.\\n- `---\\\\n` matches the closing three dashes at the end of the block, followed by a newline character.\\n- `/g` is a flag that tells `sed` to perform the substitution globally, i.e., on all matching lines in the file.\\n\\nWhen I run this command on a markdown file, it removes the existing front matter and leaves me with just the content of the file. This is exactly what I want, as I can then manually add a consistent front matter to the file.\\n\\nI hope this example gives you an idea of how powerful regular expressions can be when used with command-line utilities like `sed`. With a little bit of practice, you can write regular expressions to perform complex text manipulations with ease. If you\'re interested in learning more about regular expressions, I highly recommend checking out the [RegexOne](https://regexone.com/) interactive tutorial, which is a great resource for beginners."},{"id":"/2021/09/19/nvs-one-node-version-per-terminal-in-windows","metadata":{"permalink":"/code-harbor-hub/blog/2021/09/19/nvs-one-node-version-per-terminal-in-windows","source":"@site/blog/2021-09-19-nvs-one-node-version-per-terminal-in-windows.mdx","title":"nvs: One Node Version Per Terminal in Windows","description":"nvs is a cross-platform Node.js version manager that allows you to install and use multiple versions of Node.js on the same machine. It is similar to nvm for Unix-based systems. nvs is a simple and easy-to-use tool that allows you to switch between different versions of Node.js with a single command.","date":"2024-03-15T13:37:46.000Z","formattedDate":"March 15, 2024","tags":[{"label":"nvs","permalink":"/code-harbor-hub/blog/tags/nvs"},{"label":"node","permalink":"/code-harbor-hub/blog/tags/node"}],"readingTime":0.35,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar"}],"frontMatter":{"title":"nvs: One Node Version Per Terminal in Windows","authors":["ajay-dhangar"],"tags":["nvs","node"],"date":"2024-03-15T13:37:46.000Z","decription":"Install and setup nvs to Windows for PowerShell and Git-Bash","draft":false},"unlisted":false,"prevItem":{"title":"Sed: Normalize markdown file with Regex","permalink":"/code-harbor-hub/blog/2020/11/26/sed-normalize-md-file-with-regex"},"nextItem":{"title":"CI evolution: From FTP client to GitHub Action","permalink":"/code-harbor-hub/blog/2021/11/13/from-ftp-client-to-github-action"}},"content":"`nvs` is a cross-platform Node.js version manager that allows you to install and use multiple versions of Node.js on the same machine. It is similar to `nvm` for Unix-based systems. `nvs` is a simple and easy-to-use tool that allows you to switch between different versions of Node.js with a single command. \\n\\nIn this article, we will learn how to install and set up `nvs` on Windows for PowerShell and Git-Bash."},{"id":"/2021/11/13/from-ftp-client-to-github-action","metadata":{"permalink":"/code-harbor-hub/blog/2021/11/13/from-ftp-client-to-github-action","source":"@site/blog/2021-11-13-from-ftp-client-to-github-action.md","title":"CI evolution: From FTP client to GitHub Action","description":"In the early days of web development, the most common way to deploy a website was to use an FTP client. This involved manually uploading files to a remote server, which was a time-consuming and error-prone process. As web development practices evolved, so did the tools and techniques for deploying websites. One of the most significant advancements in this area has been the introduction of continuous integration (CI) and continuous deployment (CD) pipelines, which automate the process of building and deploying web applications.","date":"2024-03-15T11:37:46.000Z","formattedDate":"March 15, 2024","tags":[{"label":"ftp","permalink":"/code-harbor-hub/blog/tags/ftp"},{"label":"sftp","permalink":"/code-harbor-hub/blog/tags/sftp"},{"label":"GitHub Action","permalink":"/code-harbor-hub/blog/tags/git-hub-action"},{"label":"ftp deploy","permalink":"/code-harbor-hub/blog/tags/ftp-deploy"}],"readingTime":2.21,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar"}],"frontMatter":{"title":"CI evolution: From FTP client to GitHub Action","author":"Ajay Dhangar","tags":["ftp","sftp","GitHub Action","ftp deploy"],"date":"2024-03-15T11:37:46.000Z","decription":"The evolution of remote file management","draft":false},"unlisted":false,"prevItem":{"title":"nvs: One Node Version Per Terminal in Windows","permalink":"/code-harbor-hub/blog/2021/09/19/nvs-one-node-version-per-terminal-in-windows"},"nextItem":{"title":"Install MongoDB Windows","permalink":"/code-harbor-hub/blog/2022/05/01/install-mongodb-windows"}},"content":"In the early days of web development, the most common way to deploy a website was to use an FTP client. This involved manually uploading files to a remote server, which was a time-consuming and error-prone process. As web development practices evolved, so did the tools and techniques for deploying websites. One of the most significant advancements in this area has been the introduction of continuous integration (CI) and continuous deployment (CD) pipelines, which automate the process of building and deploying web applications.\\n\\nIn this article, we\'ll take a look at the evolution of remote file management, from the use of FTP clients to the adoption of GitHub Actions for automated deployment.\\n\\n## The FTP client era\\n\\nIn the early days of web development, the most common way to deploy a website was to use an FTP client. This involved manually uploading files to a remote server, which was a time-consuming and error-prone process. Developers would typically make changes to their local files, then use an FTP client to upload those changes to the server. This process was often slow and cumbersome, and it was easy to make mistakes that could result in broken websites.\\n\\n## The rise of CI/CD pipelines\\n\\nAs web development practices evolved, so did the tools and techniques for deploying websites. One of the most significant advancements in this area has been the introduction of continuous integration (CI) and continuous deployment (CD) pipelines. CI/CD pipelines automate the process of building and deploying web applications, making it faster, more reliable, and less error-prone than manual deployment methods.\\n\\n## GitHub Actions for automated deployment\\n\\nOne of the most popular CI/CD solutions for web development is GitHub Actions. GitHub Actions is a powerful, flexible, and easy-to-use tool for automating the build, test, and deployment processes of web applications. With GitHub Actions, you can define custom workflows that automatically build and deploy your web applications whenever you push changes to your repository. This makes it easy to ensure that your websites are always up-to-date and error-free, without the need for manual intervention.\\n\\n## Conclusion\\n\\nThe evolution of remote file management has come a long way since the days of using FTP clients to manually upload files to remote servers. With the introduction of CI/CD pipelines and tools like GitHub Actions, web developers now have powerful, automated solutions for building and deploying web applications. These tools make it faster, easier, and more reliable to deploy websites, and they help ensure that your websites are always up-to-date and error-free. If you\'re still using an FTP client to deploy your websites, it\'s time to consider upgrading to a more modern, automated solution like GitHub Actions."},{"id":"/2022/05/01/install-mongodb-windows","metadata":{"permalink":"/code-harbor-hub/blog/2022/05/01/install-mongodb-windows","source":"@site/blog/2022-05-01-install-mongodb-windows.md","title":"Install MongoDB Windows","description":"Installation MongoDB and mongosh","date":"2024-03-15T10:37:46.000Z","formattedDate":"March 15, 2024","tags":[{"label":"database","permalink":"/code-harbor-hub/blog/tags/database"},{"label":"mongodb","permalink":"/code-harbor-hub/blog/tags/mongodb"},{"label":"mongosh","permalink":"/code-harbor-hub/blog/tags/mongosh"},{"label":"windows","permalink":"/code-harbor-hub/blog/tags/windows"}],"readingTime":2.2,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar"}],"frontMatter":{"title":"Install MongoDB Windows","authors":["ajay-dhangar"],"tags":["database","mongodb","mongosh","windows"],"date":"2024-03-15T10:37:46.000Z","description":"Installation MongoDB and mongosh","draft":false},"unlisted":false,"prevItem":{"title":"CI evolution: From FTP client to GitHub Action","permalink":"/code-harbor-hub/blog/2021/11/13/from-ftp-client-to-github-action"},"nextItem":{"title":"Install MongoDB Linux","permalink":"/code-harbor-hub/blog/2022/11/27/install-mongodb-linux"}},"content":"MongoDB is a popular NoSQL database that is known for its flexibility and scalability. It is widely used in modern web applications and is a great choice for storing and managing large volumes of data. In this article, we will walk you through the process of installing MongoDB on a Windows system.\\n\\n## Step 1: Download the MongoDB Installer\\n\\nThe first step is to download the MongoDB installer from the official MongoDB website. You can find the installer at the following URL: [https://www.mongodb.com/try/download/community](https://www.mongodb.com/try/download/community)\\n\\n## Step 2: Run the MongoDB Installer\\n\\nOnce the installer has been downloaded, you can run it to start the installation process. Follow the on-screen instructions to complete the installation. You can choose the \\"Complete\\" setup type to install all the MongoDB tools, including the MongoDB shell (mongosh).\\n\\n## Step 3: Add MongoDB to the System Path\\n\\nAfter the installation is complete, you need to add the MongoDB binaries to your system\'s PATH environment variable. This will allow you to run MongoDB and mongosh commands from any directory in your terminal.\\n\\nTo add MongoDB to the system PATH, follow these steps:\\n\\n1. Open the Control Panel and navigate to \\"System and Security\\" > \\"System\\" > \\"Advanced system settings\\".\\n2. In the System Properties window, click on the \\"Environment Variables\\" button.\\n3. In the Environment Variables window, select the \\"Path\\" variable under \\"System variables\\" and click the \\"Edit\\" button.\\n4. Click the \\"New\\" button and add the path to the \\"bin\\" directory of your MongoDB installation (e.g., `C:\\\\Program Files\\\\MongoDB\\\\Server\\\\5.0\\\\bin`).\\n5. Click \\"OK\\" to save the changes and close the Environment Variables window.\\n6. Click \\"OK\\" again to close the System Properties window.\\n7. Restart your terminal to apply the changes.\\n8. You can now run MongoDB and mongosh commands from any directory in your terminal.\\n9. To verify that MongoDB and mongosh are installed correctly, you can run the following commands in your terminal:\\n\\n```bash\\nmongod --version\\nmongosh --version\\n```\\n\\n## Step 4: Start the MongoDB Service\\n\\nTo start the MongoDB service, you can run the following command in your terminal:\\n\\n```bash\\nmongod\\n```\\n\\nThis will start the MongoDB server on your local machine. You can now connect to the MongoDB server using the mongosh shell.\\n\\n## Step 5: Connect to the MongoDB Server\\n\\nTo connect to the MongoDB server, you can run the following command in your terminal:\\n\\n```bash\\nmongosh\\n```\\n\\nThis will open the mongosh shell, and you can start interacting with the MongoDB server using JavaScript-like syntax.\\n\\nCongratulations! You have successfully installed MongoDB and mongosh on your Windows system. You are now ready to start building powerful applications with MongoDB as your database. Happy coding!"},{"id":"/2022/11/27/install-mongodb-linux","metadata":{"permalink":"/code-harbor-hub/blog/2022/11/27/install-mongodb-linux","source":"@site/blog/2022-11-27-install-mongodb-linux.md","title":"Install MongoDB Linux","description":"Installation MongoDB and mongosh","date":"2024-03-15T08:37:46.000Z","formattedDate":"March 15, 2024","tags":[{"label":"database","permalink":"/code-harbor-hub/blog/tags/database"},{"label":"mongodb","permalink":"/code-harbor-hub/blog/tags/mongodb"},{"label":"mongosh","permalink":"/code-harbor-hub/blog/tags/mongosh"},{"label":"linux","permalink":"/code-harbor-hub/blog/tags/linux"},{"label":"debian","permalink":"/code-harbor-hub/blog/tags/debian"},{"label":"bullseye","permalink":"/code-harbor-hub/blog/tags/bullseye"}],"readingTime":1.975,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar"}],"frontMatter":{"title":"Install MongoDB Linux","authors":["ajay-dhangar"],"tags":["database","mongodb","mongosh","linux","debian","bullseye"],"date":"2024-03-15T08:37:46.000Z","description":"Installation MongoDB and mongosh","draft":false},"unlisted":false,"prevItem":{"title":"Install MongoDB Windows","permalink":"/code-harbor-hub/blog/2022/05/01/install-mongodb-windows"},"nextItem":{"title":"Step-by-Step Guide Debugging Tests in Create React App","permalink":"/code-harbor-hub/blog/2023/07/23/debugging"}},"content":"MongoDB is a popular NoSQL database that is known for its flexibility and scalability. It is widely used in modern web applications and is a great choice for storing and managing large volumes of data. In this article, we will walk you through the process of installing MongoDB on a Linux system, specifically Debian Bullseye.\\n\\n## Step 1: Import the MongoDB GPG Key\\n\\nThe first step is to import the MongoDB GPG key, which is used to verify the authenticity of the MongoDB packages. You can do this by running the following command in your terminal:\\n\\n```bash\\nwget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\\n```\\n\\n## Step 2: Create a MongoDB Source List File\\n\\nNext, you need to create a source list file for MongoDB. You can do this by running the following command:\\n\\n```bash\\necho \\"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/debian bullseye/mongodb-org/5.0 main\\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\\n```\\n\\n## Step 3: Update the Package Database\\n\\nAfter creating the source list file, you need to update the package database to include the MongoDB repository. You can do this by running the following command:\\n\\n```bash\\nsudo apt update\\n```\\n\\n## Step 4: Install MongoDB\\n\\nNow that the MongoDB repository has been added to your package database, you can install MongoDB by running the following command:\\n\\n```bash\\nsudo apt install -y mongodb-org\\n```\\n\\n## Step 5: Start the MongoDB Service\\n\\nOnce MongoDB is installed, you can start the MongoDB service by running the following command:\\n\\n```bash\\nsudo systemctl start mongod\\n```\\n\\nYou can also enable the MongoDB service to start automatically at boot time by running the following command:\\n\\n```bash\\nsudo systemctl enable mongod\\n```\\n\\n## Step 6: Verify the MongoDB Installation\\n\\nTo verify that MongoDB has been installed successfully, you can run the following command to check the status of the MongoDB service:\\n\\n```bash\\nsudo systemctl status mongod\\n```\\n\\nYou should see output indicating that the MongoDB service is active and running.\\n\\n## Step 7: Install mongosh\\n\\nFinally, you can install `mongosh`, the official MongoDB shell, by running the following command:\\n\\n```bash\\nsudo apt install -y mongosh\\n```\\n\\n## Conclusion\\n\\nCongratulations! You have successfully installed MongoDB and `mongosh` on your Debian Bullseye system. You can now start using MongoDB to store and manage your data. If you have any questions or run into any issues, feel free to consult the official [MongoDB documentation](https://docs.mongodb.com/). Happy coding!"},{"id":"/2023/07/23/debugging","metadata":{"permalink":"/code-harbor-hub/blog/2023/07/23/debugging","source":"@site/blog/2023-07-23-debugging.md","title":"Step-by-Step Guide Debugging Tests in Create React App","description":"Step-by-Step Guide Debugging Tests in Create React App","date":"2024-03-14T14:37:46.000Z","formattedDate":"March 14, 2024","tags":[{"label":"Debugging Tests","permalink":"/code-harbor-hub/blog/tags/debugging-tests"}],"readingTime":2.36,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar"}],"frontMatter":{"title":"Step-by-Step Guide Debugging Tests in Create React App","authors":["ajay-dhangar"],"tags":["Debugging Tests"],"date":"2024-03-14T14:37:46.000Z","description":"Step-by-Step Guide Debugging Tests in Create React App","draft":false},"unlisted":false,"prevItem":{"title":"Install MongoDB Linux","permalink":"/code-harbor-hub/blog/2022/11/27/install-mongodb-linux"},"nextItem":{"title":"VS Code: Fix Bug in Any Extension by Rebuilding It","permalink":"/code-harbor-hub/blog/2021/11/06/fix-bug-in-vscode-extension"}},"content":"Debugging tests in a React application can be challenging, but fear not! We\'ve got you covered with this step-by-step guide to help you overcome the common hurdles and make your tests shine. Let\'s dive in:\\n\\n**Step 1: Install Create React App**\\n\\nIf you haven\'t already set up your Create React App project, start by installing it:\\n\\n```bash\\nnpx create-react-app my-app\\ncd my-app\\n```\\n\\n**Step 2: Writing a Test**\\n\\nCreate a simple React component (e.g., a Button) in a separate file and write a test for it. For example:\\n\\n```jsx title=\\"src/Button.js\\"\\nimport React from \'react\';\\n\\nconst Button = () => {\\n  return <button>Click Me</button>;\\n};\\n\\nexport default Button;\\n```\\n\\n```jsx title=\\"src/Button.test.js\\"\\nimport React from \'react\';\\nimport { render, screen } from \'@testing-library/react\';\\nimport Button from \'./Button\';\\n\\ntest(\'renders the button\', () => {\\n  render(<Button />);\\n  const buttonElement = screen.getByText(\'Click Me\');\\n  expect(buttonElement).toBeInTheDocument();\\n});\\n```\\n\\n**Step 3: Run the Tests**\\n\\nExecute the tests using the following command:\\n\\n```bash\\nnpm test\\n```\\n\\n**Step 4: Spotting the Failure**\\n\\nIf the test fails, don\'t panic! First, identify the failing test case.\\n\\n**Step 5: Reproduce the Failure Locally**\\n\\nMake sure the failure occurs consistently by reproducing it locally. Ensure that you\'re running the correct test files and dependencies.\\n\\n**Step 6: Debugging Techniques**\\n\\nNow, let\'s employ some debugging techniques to resolve the issue:\\n\\n**6.1. Use `console.log`**\\n\\nPlace `console.log` statements at different points in your test to check the values of variables or components. For example:\\n\\n```jsx\\ntest(\'renders the button\', () => {\\n  render(<Button />);\\n  console.log(screen.getByRole(\'button\').outerHTML);\\n  const buttonElement = screen.getByText(\'Click Me\');\\n  console.log(buttonElement); // Check the button element in the console\\n  expect(buttonElement).toBeInTheDocument();\\n});\\n```\\n\\n**6.2. Utilize `debugger`**\\n\\nYou can use the `debugger` keyword to pause test execution at a specific point. Open your browser\'s developer tools to inspect variables and the call stack. For example:\\n\\n```jsx\\ntest(\'renders the button\', () => {\\n  render(<Button />);\\n  debugger; // Execution will pause here, and you can inspect the app and test code.\\n  const buttonElement = screen.getByText(\'Click Me\');\\n  expect(buttonElement).toBeInTheDocument();\\n});\\n```\\n\\n**6.3. Inspect with Chrome DevTools**\\n\\nOpen your app in Chrome, right-click, and select \\"Inspect.\\" Navigate to the \\"Console\\" tab to interactively debug your tests using the same tools you use for your regular app.\\n\\n**6.4. Snapshot Testing**\\n\\nIf you suspect issues with rendering, consider using snapshot testing. Jest can generate snapshots of your components and compare them for changes. Learn more about snapshot testing in the official documentation.\\n\\n**Step 7: Fix the Test**\\n\\nBased on your observations during debugging, fix the failing test case. It might involve modifying the component or adjusting your expectations in the test.\\n\\n**Step 8: Rerun the Tests**\\n\\nAfter making changes, run the tests again to ensure everything is working correctly:\\n\\n```bash\\nnpm test\\n```\\n\\n**Step 9: Celebrate Success!**\\n\\nCongratulations! You\'ve successfully debugged your test and conquered the Bug Monsters. Repeat these steps whenever you encounter testing issues in your React applications."},{"id":"/2021/11/06/fix-bug-in-vscode-extension","metadata":{"permalink":"/code-harbor-hub/blog/2021/11/06/fix-bug-in-vscode-extension","source":"@site/blog/2021-11-06-fix-bug-in-vscode-extension/index.md","title":"VS Code: Fix Bug in Any Extension by Rebuilding It","description":"How to fix a bug in any VS Code extension (.vsix) by rebuilding that extension","date":"2021-11-06T20:51:21.000Z","formattedDate":"November 6, 2021","tags":[{"label":"vsix","permalink":"/code-harbor-hub/blog/tags/vsix"},{"label":"VS Code","permalink":"/code-harbor-hub/blog/tags/vs-code"},{"label":"extension","permalink":"/code-harbor-hub/blog/tags/extension"}],"readingTime":0,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar"}],"frontMatter":{"title":"VS Code: Fix Bug in Any Extension by Rebuilding It","authors":["ajay-dhangar"],"tags":["vsix","VS Code","extension"],"date":"2021-11-06T20:51:21.000Z","description":"How to fix a bug in any VS Code extension (.vsix) by rebuilding that extension"},"unlisted":false,"prevItem":{"title":"Step-by-Step Guide Debugging Tests in Create React App","permalink":"/code-harbor-hub/blog/2023/07/23/debugging"},"nextItem":{"title":"Yandex disk","permalink":"/code-harbor-hub/blog/2020/12/21/yandex-disk-usage-cloud-storage"}},"content":""},{"id":"/2020/12/21/yandex-disk-usage-cloud-storage","metadata":{"permalink":"/code-harbor-hub/blog/2020/12/21/yandex-disk-usage-cloud-storage","source":"@site/blog/2020-12-21/yandex-disk-usage-cloud-storage.md","title":"Yandex disk","description":"","date":"2020-12-21T15:34:11.000Z","formattedDate":"December 21, 2020","tags":[{"label":"yandex-disk cli","permalink":"/code-harbor-hub/blog/tags/yandex-disk-cli"},{"label":"cloud storage","permalink":"/code-harbor-hub/blog/tags/cloud-storage"},{"label":"linux","permalink":"/code-harbor-hub/blog/tags/linux"}],"readingTime":0,"hasTruncateMarker":false,"authors":[{"name":"Ajay Dhangar","url":"https://github.com/ajay-dhangar","imageURL":"https://avatars.githubusercontent.com/u/99037494?v=4","key":"ajay-dhangar"}],"frontMatter":{"title":"Yandex disk","authors":["ajay-dhangar"],"tags":["yandex-disk cli","cloud storage","linux"],"date":"2020-12-21T15:34:11.000Z"},"unlisted":false,"prevItem":{"title":"VS Code: Fix Bug in Any Extension by Rebuilding It","permalink":"/code-harbor-hub/blog/2021/11/06/fix-bug-in-vscode-extension"}},"content":""}]}')}}]);