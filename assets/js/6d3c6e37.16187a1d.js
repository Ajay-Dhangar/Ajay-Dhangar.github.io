"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[3553],{17236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=t(17624),r=t(4552);const i={id:"two-sum",title:"0001 - Two Sum (Easy)",sidebar_label:"0001 - Two Sum",tags:["Two Sum","Hash Table","Two Pointer","Array","LeetCode","JavaScript","TypeScript"]},o=void 0,l={id:"lc-solutions/0000-0099/two-sum",title:"0001 - Two Sum (Easy)",description:"This is a solution to the Two Sum problem on LeetCode.",source:"@site/dsa-solutions/lc-solutions/0000-0099/0001-two-sum.md",sourceDirName:"lc-solutions/0000-0099",slug:"/lc-solutions/0000-0099/two-sum",permalink:"/code-harbor-hub/dsa-solutions/lc-solutions/0000-0099/two-sum",draft:!1,unlisted:!1,tags:[{label:"Two Sum",permalink:"/code-harbor-hub/dsa-solutions/tags/two-sum"},{label:"Hash Table",permalink:"/code-harbor-hub/dsa-solutions/tags/hash-table"},{label:"Two Pointer",permalink:"/code-harbor-hub/dsa-solutions/tags/two-pointer"},{label:"Array",permalink:"/code-harbor-hub/dsa-solutions/tags/array"},{label:"LeetCode",permalink:"/code-harbor-hub/dsa-solutions/tags/leet-code"},{label:"JavaScript",permalink:"/code-harbor-hub/dsa-solutions/tags/java-script"},{label:"TypeScript",permalink:"/code-harbor-hub/dsa-solutions/tags/type-script"}],version:"current",lastUpdatedBy:"ajay-dhangar",lastUpdatedAt:1711952790,formattedLastUpdatedAt:"Apr 1, 2024",sidebarPosition:1,frontMatter:{id:"two-sum",title:"0001 - Two Sum (Easy)",sidebar_label:"0001 - Two Sum",tags:["Two Sum","Hash Table","Two Pointer","Array","LeetCode","JavaScript","TypeScript"]},sidebar:"codeharborhub",previous:{title:"0000 - 0099",permalink:"/code-harbor-hub/dsa-solutions/category/0000---0099"}},a={},c=[{value:"Problem",id:"problem",level:2},{value:"Problem Description",id:"problem-description",level:3},{value:"Examples",id:"examples",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Solution",id:"solution",level:2},{value:"Approach 1: Brute Force (Naive)",id:"approach-1-brute-force-naive",level:3},{value:"Implementation",id:"implementation",level:4},{value:"Code",id:"code",level:4},{value:"Complexity Analysis",id:"complexity-analysis",level:4}];function u(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This is a solution to the ",(0,s.jsx)(n.a,{href:"https://leetcode.com/problems/two-sum/",children:"Two Sum"})," problem on LeetCode."]}),"\n",(0,s.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,s.jsx)(n.h3,{id:"problem-description",children:"Problem Description"}),"\n",(0,s.jsxs)(n.p,{children:["Given an array of integers ",(0,s.jsx)(n.code,{children:"nums"})," and an integer ",(0,s.jsx)(n.code,{children:"target"}),", return indices of the two numbers such that they add up to ",(0,s.jsx)(n.code,{children:"target"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"You may assume that each input would have exactly one solution, and you may not use the same element twice."}),"\n",(0,s.jsx)(n.p,{children:"You can return the answer in any order."}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Input: nums = [3,2,4], target = 6\nOutput: [1,2]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Input: nums = [3,3], target = 6\nOutput: [0,1]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"constraints",children:"Constraints"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"2 <= nums.length <= 10^4"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"-10^9 <= nums[i] <= 10^9"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"-10^9 <= target <= 10^9"})}),"\n",(0,s.jsx)(n.li,{children:"Only one valid answer exists."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.h3,{id:"approach-1-brute-force-naive",children:"Approach 1: Brute Force (Naive)"}),"\n",(0,s.jsxs)(n.p,{children:["The brute force approach is simple. We iterate through each element ",(0,s.jsx)(n.code,{children:"nums[i]"})," and check if there is another element ",(0,s.jsx)(n.code,{children:"nums[j]"})," such that ",(0,s.jsx)(n.code,{children:"nums[i] + nums[j] == target"}),". If we find such a pair, we return the indices ",(0,s.jsx)(n.code,{children:"[i, j]"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:'function twoSumProblem() {\n  const nums = [2, 7, 11, 15];\n  const target = 9;\n\n    const twoSum = function (nums, target) {\n        for (let i = 0; i < nums.length; i++) {\n        for (let j = i + 1; j < nums.length; j++) {\n            if (nums[i] + nums[j] === target) {\n            return [i, j];\n            }\n        }\n        }\n    \n        return [];\n    };\n\n  const result = twoSum(nums, target);\n  return (\n    <div>\n      <p><b>Input:</b> nums = {"[", nums.join(", "), "]"}, target = {target}</p>\n      <p><b>Output:</b> {"[", result.join(", "), "]"}</p>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"code",children:"Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",metastring:'title="Two Sum Problem" showLineNumbers',children:"function twoSum(nums, target) {\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] + nums[j] === target) {\n        return [i, j];\n      }\n    }\n  }\n\n  return [];\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"complexity-analysis",children:"Complexity Analysis"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Time Complexity: ",(0,s.jsx)(n.strong,{children:(0,s.jsxs)(n.em,{children:["O(n",(0,s.jsx)("sup",{children:"2"}),")"]})})]}),"\n",(0,s.jsxs)(n.li,{children:["Space Complexity: ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"O(1)"})})]}),"\n",(0,s.jsxs)(n.li,{children:["Where ",(0,s.jsx)(n.code,{children:"n"})," is the length of the input array ",(0,s.jsx)(n.code,{children:"nums"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The time complexity is ",(0,s.jsx)(n.strong,{children:(0,s.jsxs)(n.em,{children:["O(n",(0,s.jsx)("sup",{children:"2"}),")"]})})," because we are iterating through the array twice."]}),"\n",(0,s.jsxs)(n.li,{children:["The space complexity is ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"O(1)"})})," because we are not using any extra space."]}),"\n",(0,s.jsx)(n.li,{children:"This approach is not efficient and is not recommended for large inputs."}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>l,M:()=>o});var s=t(11504);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);