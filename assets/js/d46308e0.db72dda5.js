"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[90316],{59012:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(17624),n=t(4552);const i={id:"for-in-loop-in-javascript",title:"For In Loop in JavaScript",sidebar_label:"For In Loop",sidebar_position:22,tags:["JavaScript","For In Loop","Loop","Iteration","Control","Flow","Iterative","Statements","Loops","Iteration","Iterating","Iterations"],description:"In this tutorial, we will learn about the for...in loop in JavaScript. We will learn how to use the for...in loop to iterate over the properties of an object in JavaScript."},a=void 0,s={id:"javascript/for-in-loop-in-javascript",title:"For In Loop in JavaScript",description:"In this tutorial, we will learn about the for...in loop in JavaScript. We will learn how to use the for...in loop to iterate over the properties of an object in JavaScript.",source:"@site/docs/javascript/for-in-loop.md",sourceDirName:"javascript",slug:"/javascript/for-in-loop-in-javascript",permalink:"/code-harbor-hub/docs/javascript/for-in-loop-in-javascript",draft:!1,unlisted:!1,editUrl:"https://github.com/Ajay-Dhangar/code-harbor-hub/edit/main/docs/javascript/for-in-loop.md",tags:[{label:"JavaScript",permalink:"/code-harbor-hub/docs/tags/java-script"},{label:"For In Loop",permalink:"/code-harbor-hub/docs/tags/for-in-loop"},{label:"Loop",permalink:"/code-harbor-hub/docs/tags/loop"},{label:"Iteration",permalink:"/code-harbor-hub/docs/tags/iteration"},{label:"Control",permalink:"/code-harbor-hub/docs/tags/control"},{label:"Flow",permalink:"/code-harbor-hub/docs/tags/flow"},{label:"Iterative",permalink:"/code-harbor-hub/docs/tags/iterative"},{label:"Statements",permalink:"/code-harbor-hub/docs/tags/statements"},{label:"Loops",permalink:"/code-harbor-hub/docs/tags/loops"},{label:"Iterating",permalink:"/code-harbor-hub/docs/tags/iterating"},{label:"Iterations",permalink:"/code-harbor-hub/docs/tags/iterations"}],version:"current",lastUpdatedBy:"ajay-dhangar",lastUpdatedAt:1710850375,formattedLastUpdatedAt:"Mar 19, 2024",sidebarPosition:22,frontMatter:{id:"for-in-loop-in-javascript",title:"For In Loop in JavaScript",sidebar_label:"For In Loop",sidebar_position:22,tags:["JavaScript","For In Loop","Loop","Iteration","Control","Flow","Iterative","Statements","Loops","Iteration","Iterating","Iterations"],description:"In this tutorial, we will learn about the for...in loop in JavaScript. We will learn how to use the for...in loop to iterate over the properties of an object in JavaScript."},sidebar:"javascript",previous:{title:"For Loop",permalink:"/code-harbor-hub/docs/javascript/for-loop-in-javascript"},next:{title:"For Of Loop",permalink:"/code-harbor-hub/docs/javascript/for-of-loop-in-javascript"}},l={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Example",id:"example",level:2},{value:"Using <code>hasOwnProperty</code> Method",id:"using-hasownproperty-method",level:2},{value:"Summary",id:"summary",level:2}];function p(e){const o={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(o.p,{children:["In JavaScript, the ",(0,r.jsx)(o.code,{children:"for...in"})," loop is used to iterate over the properties of an object. It is often used when you want to perform an action on each property of an object."]}),"\n",(0,r.jsx)(o.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsxs)(o.p,{children:["The syntax of the ",(0,r.jsx)(o.code,{children:"for...in"})," loop is as follows:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",metastring:'title="app.js"',children:"for (variable in object) {\n  // code to be executed\n}\n"})}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"for...in"})," loop starts with the ",(0,r.jsx)(o.code,{children:"for"})," keyword followed by parentheses."]}),"\n",(0,r.jsxs)(o.li,{children:["Inside the parentheses, you need to specify a ",(0,r.jsx)(o.code,{children:"variable"})," to hold the property name and the ",(0,r.jsx)(o.code,{children:"object"})," over which you want to iterate."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"variable"})," will be assigned the property name of the object on each iteration."]}),"\n",(0,r.jsx)(o.li,{children:"The code inside the loop will be executed for each property of the object."}),"\n",(0,r.jsx)(o.li,{children:"The loop will iterate over all enumerable properties of the object, including inherited properties from the object's prototype chain."}),"\n",(0,r.jsx)(o.li,{children:"The order of iteration is not guaranteed and may vary between different JavaScript engines."}),"\n",(0,r.jsxs)(o.li,{children:["It is recommended to use the ",(0,r.jsx)(o.code,{children:"hasOwnProperty"})," method to check if the property is a direct property of the object and not inherited from its prototype chain."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"for...in"})," loop should not be used to iterate over arrays, as it may produce unexpected results due to the iteration of array indices and inherited properties."]}),"\n",(0,r.jsxs)(o.li,{children:["The ",(0,r.jsx)(o.code,{children:"for...in"})," loop should be used only for objects."]}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(o.p,{children:["The following example demonstrates how to use the ",(0,r.jsx)(o.code,{children:"for...in"})," loop to iterate over the properties of an object:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",metastring:'title="app.js"',children:'const person = {\n  name: "John",\n  age: 23,\n  // Method\n  greet: function () {\n    console.log(\n      "Hello, I am " + this.name + " and I am " + this.age + " years old."\n    );\n  },\n};\n\nfor (let property in person) {\n  console.log(property + ": " + person[property]);\n}\n'})}),"\n",(0,r.jsxs)(o.p,{children:["In this example, the ",(0,r.jsx)(o.code,{children:"for...in"})," loop iterates over the properties of the ",(0,r.jsx)(o.code,{children:"person"})," object. On each iteration, the ",(0,r.jsx)(o.code,{children:"property"})," variable is assigned the name of the property, and the code inside the loop logs the property name and its value to the console."]}),"\n",(0,r.jsx)(o.p,{children:"The output of the above example will be:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-plaintext",metastring:'title="Output"',children:'name: John\nage: 23\ngreet: function () {\n  console.log(\n    "Hello, I am " + this.name + " and I am " + this.age + " years old."\n  );\n}\n'})}),"\n",(0,r.jsx)(o.p,{children:"In each iteration, the property name and its value are printed to the console."}),"\n",(0,r.jsxs)(o.h2,{id:"using-hasownproperty-method",children:["Using ",(0,r.jsx)(o.code,{children:"hasOwnProperty"})," Method"]}),"\n",(0,r.jsxs)(o.p,{children:["To check if the property is a direct property of the object and not inherited from its prototype chain, you can use the ",(0,r.jsx)(o.code,{children:"hasOwnProperty"})," method. Here's an example:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-js",metastring:'title="app.js"',children:'const person = {\n  name: "John",\n  age: 23,\n  // Method\n  greet: function () {\n    console.log(\n      "Hello, I am " + this.name + " and I am " + this.age + " years old."\n    );\n  },\n};\n\nfor (let property in person) {\n  if (person.hasOwnProperty(property)) {\n    console.log(property + ": " + person[property]);\n  }\n}\n'})}),"\n",(0,r.jsxs)(o.p,{children:["In this example, the ",(0,r.jsx)(o.code,{children:"hasOwnProperty"})," method is used to check if the property is a direct property of the ",(0,r.jsx)(o.code,{children:"person"})," object. If it is, the property name and its value are printed to the console."]}),"\n",(0,r.jsxs)(o.admonition,{title:"\ud83d\udcdd Note",type:"tip",children:[(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"hasOwnProperty"})," method returns ",(0,r.jsx)(o.code,{children:"true"})," if the property is a direct property of the object, otherwise it returns ",(0,r.jsx)(o.code,{children:"false"}),"."]}),(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"for...in"})," loop should be used with caution, as it iterates over all enumerable properties of the object, including inherited properties from the object's prototype chain. It is recommended to use the ",(0,r.jsx)(o.code,{children:"hasOwnProperty"})," method to check if the property is a direct property of the object."]}),(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"for...in"})," loop should not be used to iterate over arrays, as it may produce unexpected results due to the iteration of array indices and inherited properties."]}),(0,r.jsxs)(o.p,{children:["The ",(0,r.jsx)(o.code,{children:"for...in"})," loop should be used only for objects."]})]}),"\n",(0,r.jsx)(o.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(o.p,{children:["In this tutorial, we learned about the ",(0,r.jsx)(o.code,{children:"for...in"})," loop in JavaScript. We learned how to use the ",(0,r.jsx)(o.code,{children:"for...in"})," loop to iterate over the properties of an object. We also learned about using the ",(0,r.jsx)(o.code,{children:"hasOwnProperty"})," method to check if the property is a direct property of the object and not inherited from its prototype chain."]})]})}function d(e={}){const{wrapper:o}={...(0,n.M)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},4552:(e,o,t)=>{t.d(o,{I:()=>s,M:()=>a});var r=t(11504);const n={},i=r.createContext(n);function a(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);