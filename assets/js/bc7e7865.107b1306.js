"use strict";(self.webpackChunkcode_harbor_hub=self.webpackChunkcode_harbor_hub||[]).push([[4128],{1944:e=>{e.exports=JSON.parse('{"label":"sorting","permalink":"/code-harbor-hub/dsa/tags/sorting","allTagsPath":"/code-harbor-hub/dsa/tags","count":2,"items":[{"id":"arrays/arrays-bubblesort-in-dsa","title":"Arrays - Bubble Sort in DSA","description":"Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller elements \'bubble\' to the top of the list. Although the algorithm is simple, it is too slow and impractical for most problems even when compared to insertion sort. It can be practical if the input is usually in sort order but may occasionally have some out-of-order elements nearly in position.","permalink":"/code-harbor-hub/dsa/arrays/arrays-bubblesort-in-dsa"},{"id":"arrays/arrays-selectionsort-in-dsa","title":"Arrays - Selection Sort in DSA","description":"Selection Sort is an in-place comparison sorting algorithm that divides the input list into two parts: the sublist of items already sorted and the sublist of items remaining to be sorted. It repeatedly finds the minimum element from the unsorted part and puts it at the beginning of the unsorted part. The algorithm maintains two subarrays in a given array. The subarray which is already sorted and the remaining subarray which is unsorted. In every iteration of selection sort, the minimum element from the unsorted subarray is picked and moved to the sorted subarray.","permalink":"/code-harbor-hub/dsa/arrays/arrays-selectionsort-in-dsa"}],"unlisted":false}')}}]);